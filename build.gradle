plugins {
    id 'org.jetbrains.kotlin.multiplatform' version '1.4.0-rc'
    id 'org.jetbrains.dokka' version '0.10.1'
}
repositories {
    mavenCentral()
    jcenter()
}

group = 'com.github.AtriusX'
version '2020.3.1-A'

apply plugin: 'maven'
apply plugin: 'maven-publish'

kotlin {
    jvm()
    js {
        browser {
        }
        nodejs {
        }
    }
    // For ARM, should be changed to iosArm32 or iosArm64
    // For Linux, should be changed to e.g. linuxX64
    // For MacOS, should be changed to e.g. macosX64
    // For Windows, should be changed to e.g. mingwX64
    mingwX64("mingw") {
        binaries {
            executable()
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.8'
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        jvmMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }
        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core-js:1.3.8'
            }
        }
        jsTest {
            dependencies {
                implementation kotlin('test-js')
            }
        }
        mingwMain {
            dependencies {
                implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core-native:1.3.8'
            }
        }
        mingwTest {
        }
    }
}

dokka {
//    outputFormat = 'markdown'
    configuration {
        multiplatform {
            targets = ["JVM", "JS", "Native"]
        }
        reportUndocumented = true
        skipEmptyPackages = true
    }
}

task test {
    dependsOn 'allTests'
}

artifacts {
    archives jvmJar
}

wrapper {
    gradleVersion = "6.5.1"
    distributionType = Wrapper.DistributionType.ALL
}